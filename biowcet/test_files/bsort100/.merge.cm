
typedef unsigned char __u_char;

typedef unsigned short int __u_short;

typedef unsigned int __u_int;

typedef unsigned long int __u_long;

typedef signed char __int8_t;

typedef unsigned char __uint8_t;

typedef signed short int __int16_t;

typedef unsigned short int __uint16_t;

typedef signed int __int32_t;

typedef unsigned int __uint32_t;

typedef signed long int __int64_t;

typedef unsigned long int __uint64_t;

typedef __int8_t __int_least8_t;

typedef __uint8_t __uint_least8_t;

typedef __int16_t __int_least16_t;

typedef __uint16_t __uint_least16_t;

typedef __int32_t __int_least32_t;

typedef __uint32_t __uint_least32_t;

typedef __int64_t __int_least64_t;

typedef __uint64_t __uint_least64_t;

typedef long int __quad_t;

typedef unsigned long int __u_quad_t;

typedef long int __intmax_t;

typedef unsigned long int __uintmax_t;

typedef unsigned long int __dev_t;

typedef unsigned int __uid_t;

typedef unsigned int __gid_t;

typedef unsigned long int __ino_t;

typedef unsigned long int __ino64_t;

typedef unsigned int __mode_t;

typedef unsigned long int __nlink_t;

typedef long int __off_t;

typedef long int __off64_t;

typedef int __pid_t;

typedef struct  {
	int __val[2];
} __fsid_t;

typedef long int __clock_t;

typedef unsigned long int __rlim_t;

typedef unsigned long int __rlim64_t;

typedef unsigned int __id_t;

typedef long int __time_t;

typedef unsigned int __useconds_t;

typedef long int __suseconds_t;

typedef long int __suseconds64_t;

typedef int __daddr_t;

typedef int __key_t;

typedef int __clockid_t;

typedef void *__timer_t;

typedef long int __blksize_t;

typedef long int __blkcnt_t;

typedef long int __blkcnt64_t;

typedef unsigned long int __fsblkcnt_t;

typedef unsigned long int __fsblkcnt64_t;

typedef unsigned long int __fsfilcnt_t;

typedef unsigned long int __fsfilcnt64_t;

typedef long int __fsword_t;

typedef long int __ssize_t;

typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;

typedef __off64_t __loff_t;

typedef char *__caddr_t;

typedef long int __intptr_t;

typedef unsigned int __socklen_t;

typedef int __sig_atomic_t;

typedef __u_char u_char;

typedef __u_short u_short;

typedef __u_int u_int;

typedef __u_long u_long;

typedef __quad_t quad_t;

typedef __u_quad_t u_quad_t;

typedef __fsid_t fsid_t;

typedef __loff_t loff_t;

typedef __ino_t ino_t;

typedef __dev_t dev_t;

typedef __gid_t gid_t;

typedef __mode_t mode_t;

typedef __nlink_t nlink_t;

typedef __uid_t uid_t;

typedef __off_t off_t;

typedef __pid_t pid_t;

typedef __id_t id_t;

typedef __ssize_t ssize_t;

typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;

typedef __key_t key_t;

typedef __clock_t clock_t;

typedef __clockid_t clockid_t;

typedef __time_t time_t;

typedef __timer_t timer_t;

typedef unsigned long int size_t;

typedef unsigned long int ulong;

typedef unsigned short int ushort;

typedef unsigned int uint;

typedef __int8_t int8_t;

typedef __int16_t int16_t;

typedef __int32_t int32_t;

typedef __int64_t int64_t;

typedef __uint8_t u_int8_t;

typedef __uint16_t u_int16_t;

typedef __uint32_t u_int32_t;

typedef __uint64_t u_int64_t;

typedef int register_t __attribute__ ((__mode__(__word__))) ;

static  __attribute__ ((__inline__)) __uint16_t __bswap_16(__uint16_t __bsx)
{
# 37 "/usr/include/x86_64-linux-gnu/bits/byteswap.h"
	return __builtin_bswap16(__bsx);
}

static  __attribute__ ((__inline__)) __uint32_t __bswap_32(__uint32_t __bsx_0)
{
# 52 "/usr/include/x86_64-linux-gnu/bits/byteswap.h"
	return __builtin_bswap32(__bsx_0);
}

static  __attribute__ ((__inline__)) __uint64_t __bswap_64(__uint64_t __bsx_1)
{
# 73 "/usr/include/x86_64-linux-gnu/bits/byteswap.h"
	return __builtin_bswap64(__bsx_1);
}

static  __attribute__ ((__inline__)) __uint16_t __uint16_identity(__uint16_t
	__x)
{
# 35 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h"
	return __x;
}

static  __attribute__ ((__inline__)) __uint32_t __uint32_identity(__uint32_t
	__x_0)
{
# 41 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h"
	return __x_0;
}

static  __attribute__ ((__inline__)) __uint64_t __uint64_identity(__uint64_t
	__x_1)
{
# 47 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h"
	return __x_1;
}

typedef struct  {
	unsigned long int __val[1024 / ((8 * sizeof(unsigned long int)))];
} __sigset_t;

typedef __sigset_t sigset_t;

struct timeval {
	__time_t tv_sec;
	__suseconds_t tv_usec;
} ;

struct timespec {
	__time_t tv_sec;
	__syscall_slong_t tv_nsec;
} ;

typedef __suseconds_t suseconds_t;

typedef long int __fd_mask;

typedef struct  {
	__fd_mask __fds_bits[1024 / ((8 * (int)sizeof(__fd_mask)))];
} fd_set;

typedef __fd_mask fd_mask;

int select(int __nfds, fd_set * __restrict __readfds, fd_set * __restrict
	__writefds, fd_set * __restrict __exceptfds, struct timeval * __restrict
	__timeout);
int pselect(int __nfds, fd_set * __restrict __readfds, fd_set * __restrict
	__writefds, fd_set * __restrict __exceptfds, struct timespec
	 const * __restrict __timeout, __sigset_t  const * __restrict
	__sigmask);

typedef __blksize_t blksize_t;

typedef __blkcnt_t blkcnt_t;

typedef __fsblkcnt_t fsblkcnt_t;

typedef __fsfilcnt_t fsfilcnt_t;

typedef union  {
	unsigned long long int __value64;
	struct  {
		unsigned int __low;
		unsigned int __high;
	} __value32;
} __atomic_wide_counter;

typedef struct __pthread_internal_list {
	struct __pthread_internal_list *__prev;
	struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist {
	struct __pthread_internal_slist *__next;
} __pthread_slist_t;

struct __pthread_mutex_s {
	int __lock;
	unsigned int __count;
	int __owner;
	unsigned int __nusers;
	int __kind;
	short int __spins;
	short int __elision;
	__pthread_list_t __list;
} ;

struct __pthread_rwlock_arch_t {
	unsigned int __readers;
	unsigned int __writers;
	unsigned int __wrphase_futex;
	unsigned int __writers_futex;
	unsigned int __pad3;
	unsigned int __pad4;
	int __cur_writer;
	int __shared;
	signed char __rwelision;
	unsigned char __pad1[7];
	unsigned long int __pad2;
	unsigned int __flags;
} ;

struct __pthread_cond_s {
	__atomic_wide_counter __wseq;
	__atomic_wide_counter __g1_start;
	unsigned int __g_refs[2];
	unsigned int __g_size[2];
	unsigned int __g1_orig_size;
	unsigned int __wrefs;
	unsigned int __g_signals[2];
} ;

typedef unsigned int __tss_t;

typedef unsigned long int __thrd_t;

typedef struct  {
	int __data;
} __once_flag;

typedef unsigned long int pthread_t;

typedef union  {
	char __size[4];
	int __align;
} pthread_mutexattr_t;

typedef union  {
	char __size[4];
	int __align;
} pthread_condattr_t;

typedef unsigned int pthread_key_t;

typedef int pthread_once_t;

union pthread_attr_t {
	char __size[56];
	long int __align;
} ;

typedef union pthread_attr_t pthread_attr_t;

typedef union  {
	struct __pthread_mutex_s __data;
	char __size[40];
	long int __align;
} pthread_mutex_t;

typedef union  {
	struct __pthread_cond_s __data;
	char __size[48];
	long long int __align;
} pthread_cond_t;

typedef union  {
	struct __pthread_rwlock_arch_t __data;
	char __size[56];
	long int __align;
} pthread_rwlock_t;

typedef union  {
	char __size[8];
	long int __align;
} pthread_rwlockattr_t;

typedef int  volatile pthread_spinlock_t;

typedef union  {
	char __size[32];
	long int __align;
} pthread_barrier_t;

typedef union  {
	char __size[4];
	int __align;
} pthread_barrierattr_t;

struct tms {
	clock_t tms_utime;
	clock_t tms_stime;
	clock_t tms_cutime;
	clock_t tms_cstime;
} ;

clock_t times(struct tms *__buffer) __attribute__ ((__leaf__, __nothrow__)) ;

typedef __builtin_va_list __gnuc_va_list;

typedef struct  {
	int __count;
	union  {
		unsigned int __wch;
		char __wchb[4];
	} __value;
} __mbstate_t;

typedef struct _G_fpos_t {
	__off_t __pos;
	__mbstate_t __state;
} __fpos_t;

typedef struct _G_fpos64_t {
	__off64_t __pos;
	__mbstate_t __state;
} __fpos64_t;

struct _IO_FILE ;

typedef struct _IO_FILE __FILE;

struct _IO_FILE ;

typedef struct _IO_FILE FILE;

struct _IO_FILE ;

struct _IO_marker ;

struct _IO_codecvt ;

struct _IO_wide_data ;

typedef void _IO_lock_t;

struct _IO_FILE {
	int _flags;
	char *_IO_read_ptr;
	char *_IO_read_end;
	char *_IO_read_base;
	char *_IO_write_base;
	char *_IO_write_ptr;
	char *_IO_write_end;
	char *_IO_buf_base;
	char *_IO_buf_end;
	char *_IO_save_base;
	char *_IO_backup_base;
	char *_IO_save_end;
	struct _IO_marker *_markers;
	struct _IO_FILE *_chain;
	int _fileno;
	int _flags2;
	__off_t _old_offset;
	unsigned short int _cur_column;
	signed char _vtable_offset;
	char _shortbuf[1];
	_IO_lock_t *_lock;
	__off64_t _offset;
	struct _IO_codecvt *_codecvt;
	struct _IO_wide_data *_wide_data;
	struct _IO_FILE *_freeres_list;
	void *_freeres_buf;
	size_t __pad5;
	int _mode;
	char _unused2[15 * sizeof(int) - 4 * sizeof(void*) - sizeof(size_t)];
} ;

typedef __gnuc_va_list va_list;

typedef __fpos_t fpos_t;

FILE *stdin;
FILE *stdout;
FILE *stderr;
int remove(char  const *__filename) __attribute__ ((__leaf__, __nothrow__)) ;
int rename(char  const *__old, char  const *__new) __attribute__ ((__leaf__,
	__nothrow__)) ;
int renameat(int __oldfd, char  const *__old, int __newfd, char
	 const *__new) __attribute__ ((__leaf__, __nothrow__)) ;
int fclose(FILE *__stream);
FILE *tmpfile(void ) __attribute__ ((__malloc__(fclose, 1), __malloc__)) ;
char *tmpnam(char [20]) __attribute__ ((__leaf__, __nothrow__)) ;
char *tmpnam_r(char __s[20]) __attribute__ ((__leaf__, __nothrow__)) ;
char *tempnam(char  const *__dir, char
	 const *__pfx) __attribute__ ((__malloc__(__builtin_free, 1),
	__malloc__, __leaf__, __nothrow__)) ;
int fflush(FILE *__stream);
int fflush_unlocked(FILE *__stream);
FILE *fopen(char  const * __restrict __filename, char  const * __restrict
	__modes) __attribute__ ((__malloc__(fclose, 1), __malloc__)) ;
FILE *freopen(char  const * __restrict __filename, char  const * __restrict
	__modes, FILE * __restrict __stream);
FILE *fdopen(int __fd, char  const *__modes) __attribute__ ((__malloc__(fclose,
	1), __malloc__, __leaf__, __nothrow__)) ;
FILE *fmemopen(void *__s, size_t __len, char
	 const *__modes) __attribute__ ((__malloc__(fclose, 1), __malloc__,
	__leaf__, __nothrow__)) ;
FILE *open_memstream(char **__bufloc, size_t
	*__sizeloc) __attribute__ ((__malloc__(fclose, 1), __malloc__, __leaf__,
	__nothrow__)) ;
void setbuf(FILE * __restrict __stream, char * __restrict
	__buf) __attribute__ ((__leaf__, __nothrow__)) ;
int setvbuf(FILE * __restrict __stream, char * __restrict __buf, int __modes,
	size_t __n) __attribute__ ((__leaf__, __nothrow__)) ;
void setbuffer(FILE * __restrict __stream, char * __restrict __buf, size_t
	__size) __attribute__ ((__leaf__, __nothrow__)) ;
void setlinebuf(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int fprintf(FILE * __restrict __stream, char  const * __restrict __format, ...);
int printf(char  const * __restrict __format, ...);
int sprintf(char * __restrict __s, char  const * __restrict
	__format, ...) __attribute__ ((__nothrow__)) ;
int vfprintf(FILE * __restrict __s, char  const * __restrict __format,
	__gnuc_va_list __arg);
int vprintf(char  const * __restrict __format, __gnuc_va_list __arg);
int vsprintf(char * __restrict __s, char  const * __restrict __format,
	__gnuc_va_list __arg) __attribute__ ((__nothrow__)) ;
int snprintf(char * __restrict __s, size_t __maxlen, char  const * __restrict
	__format, ...) __attribute__ ((__format__(__printf__, 3, 4),
	__nothrow__)) ;
int vsnprintf(char * __restrict __s, size_t __maxlen, char  const * __restrict
	__format, __gnuc_va_list __arg) __attribute__ ((__format__(__printf__,
	3, 0), __nothrow__)) ;
int vdprintf(int __fd, char  const * __restrict __fmt, __gnuc_va_list
	__arg) __attribute__ ((__format__(__printf__, 2, 0))) ;
int dprintf(int __fd, char  const * __restrict
	__fmt, ...) __attribute__ ((__format__(__printf__, 2, 3))) ;
int fscanf(FILE * __restrict __stream, char  const * __restrict __format, ...);
int scanf(char  const * __restrict __format, ...);
int sscanf(char  const * __restrict __s, char  const * __restrict
	__format, ...) __attribute__ ((__leaf__, __nothrow__)) ;
int vfscanf(FILE * __restrict __s, char  const * __restrict __format,
	__gnuc_va_list __arg) __attribute__ ((__format__(__scanf__, 2, 0))) ;
int vscanf(char  const * __restrict __format, __gnuc_va_list
	__arg) __attribute__ ((__format__(__scanf__, 1, 0))) ;
int vsscanf(char  const * __restrict __s, char  const * __restrict __format,
	__gnuc_va_list __arg) __attribute__ ((__format__(__scanf__, 2, 0),
	__leaf__, __nothrow__)) ;
int fgetc(FILE *__stream);
int getc(FILE *__stream);
int getchar(void );
int getc_unlocked(FILE *__stream);
int getchar_unlocked(void );
int fgetc_unlocked(FILE *__stream);
int fputc(int __c, FILE *__stream);
int putc(int __c, FILE *__stream);
int putchar(int __c);
int fputc_unlocked(int __c, FILE *__stream);
int putc_unlocked(int __c, FILE *__stream);
int putchar_unlocked(int __c);
int getw(FILE *__stream);
int putw(int __w, FILE *__stream);
char *fgets(char * __restrict __s, int __n, FILE * __restrict
	__stream) __attribute__ ((__access__(__write_only__, 1, 2))) ;
__ssize_t __getdelim(char ** __restrict __lineptr, size_t * __restrict __n, int
	__delimiter, FILE * __restrict __stream);
__ssize_t getdelim(char ** __restrict __lineptr, size_t * __restrict __n, int
	__delimiter, FILE * __restrict __stream);
__ssize_t getline(char ** __restrict __lineptr, size_t * __restrict __n, FILE
	* __restrict __stream);
int fputs(char  const * __restrict __s, FILE * __restrict __stream);
int puts(char  const *__s);
int ungetc(int __c, FILE *__stream);
size_t fread(void * __restrict __ptr, size_t __size, size_t __n, FILE
	* __restrict __stream);
size_t fwrite(void  const * __restrict __ptr, size_t __size, size_t __n, FILE
	* __restrict __s);
size_t fread_unlocked(void * __restrict __ptr, size_t __size, size_t __n, FILE
	* __restrict __stream);
size_t fwrite_unlocked(void  const * __restrict __ptr, size_t __size, size_t
	__n, FILE * __restrict __stream);
int fseek(FILE *__stream, long int __off, int __whence);
long int ftell(FILE *__stream);
void rewind(FILE *__stream);
int fseeko(FILE *__stream, __off_t __off, int __whence);
__off_t ftello(FILE *__stream);
int fgetpos(FILE * __restrict __stream, fpos_t * __restrict __pos);
int fsetpos(FILE *__stream, fpos_t  const *__pos);
void clearerr(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int feof(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int ferror(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
void clearerr_unlocked(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int feof_unlocked(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int ferror_unlocked(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
void perror(char  const *__s);
int fileno(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int fileno_unlocked(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int pclose(FILE *__stream);
FILE *popen(char  const *__command, char
	 const *__modes) __attribute__ ((__malloc__(pclose, 1), __malloc__)) ;
char *ctermid(char *__s) __attribute__ ((__access__(__write_only__, 1),
	__leaf__, __nothrow__)) ;
void flockfile(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int ftrylockfile(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
void funlockfile(FILE *__stream) __attribute__ ((__leaf__, __nothrow__)) ;
int __uflow(FILE *);
int __overflow(FILE *, int );
int Seed, Array[100 + 1];
int factor;

main()
{
	long int StartTime, StopTime;
	float TotalTime;
# 41 "bsort100.c"
	Initialize(Array);
# 43 "bsort100.c"
	BubbleSort(Array);
}

int ttime()
{
	struct tms buffer;
	int utime;
# 63 "bsort100.c"
	utime = buffer.tms_utime / 60.0 * 1000.0;
# 64 "bsort100.c"
	return utime;
}

int Initialize(int Array_0[])
{
	int Index, fact;
# 77 "bsort100.c"
	factor = -1;
# 82 "bsort100.c"
	fact = factor;
# 83 "bsort100.c"
	for(Index = 1; Index <= 100; Index++)
# 84 "bsort100.c"
		Array_0[Index] = Index * fact * (int)((*(char*)0x80200001));
}

int BubbleSort(int Array_1[])
{
	char __tmp_0__ = 0, __tmp_1__ = 0;
	int Sorted = 0;
	int Temp, LastIndex, Index_0, i;
# 98 "bsort100.c"
	for(i = 1; !__tmp_1__ && i <= 100 - 1; __tmp_1__ || i++)
# 101 "bsort100.c"
	{
# 102 "bsort100.c"
		Sorted = 1;
# 103 "bsort100.c"
		for(Index_0 = 1; !__tmp_0__ && Index_0 <= 100 - 1; __tmp_0__ ||
			Index_0++)
# 105 "bsort100.c"
		{
# 106 "bsort100.c"
			if(Index_0 > 100 - i)
# 107 "bsort100.c"
				__tmp_0__ = 1 != 0;
			if(!__tmp_0__)
			{
# 108 "bsort100.c"
				if(Array_1[Index_0] > Array_1[Index_0 + 1])
# 109 "bsort100.c"
				{
# 110 "bsort100.c"
					Temp = Array_1[Index_0];
# 111 "bsort100.c"
					Array_1[Index_0] = Array_1[Index_0 + 1];
# 112 "bsort100.c"
					Array_1[Index_0 + 1] = Temp;
# 113 "bsort100.c"
					Sorted = 0;
				}
			}
		}
		__tmp_0__ = 0;
# 117 "bsort100.c"
		if(Sorted)
# 118 "bsort100.c"
			__tmp_1__ = 1 != 0;
	}
	__tmp_1__ = 0;
}

